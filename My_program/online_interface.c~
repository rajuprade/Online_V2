#include<stdio.h>
#include<pthread.h>
#include<string.h>
#include <stdlib.h>
#include <readline/readline.h>
#include <readline/history.h>

typedef struct 
{
  int seq;
  char timestamp[64];
  char system_name[16];
  char op_name[16];
  short int number_param;
  char parameter_name[32][16];
  char Argument_Ch1[32][16];
  char Argument_Ch2[32][16];
 } Cmd;

typedef struct
{
  char antenna_name[10];
  Cmd  CMD[10];
} ANT_CMD;


char *antn[]= {"C00", "C01", "C02","C03","C04"}; //  the compiler would count the characters, leave room for the nul character and store the total of characters in memory the location of which would be returned by the array name
typedef enum { C00,C01,C02,C03,C04,END } ant_name;

char *user[]={ "create","add","delete"};
typedef enum { create,add,delete,UEND} udef;

char *das[]={"dasinit","Addp","delprj","startscan","stopscan"};

typedef enum {dasinit,addp,delprj,startscan,stopscan,DEND} dastype;
int ret=0,no_element;
char *name;
char *token;
char *del = " ";
char cmd[10][10];
void antenna(int i);

void userdef(int k);
void dasdef( int r);

void antenna(int i)
{
   int j;
   switch(i)
   {
     case C00:  printf("C00 ANTENNA\n");
                for(j=0;j<no_element;j++)
                 {
                   // fprintf(stderr," Command is %s\n",cmd[j]);
                   if(j==0) fprintf(stderr,"Antenna Name is %s\n",cmd[j]);
                   else if(j==1) fprintf(stderr,"System name is %s\n",cmd[j]);
                   else if (j==2) fprintf(stderr,"Operation name is %s\n",cmd[j]);
                   else fprintf(stderr," Not supported command\n");
                 }
                break;
     case C01: printf("C01 ANTENNA\n");break;
     case C02: printf("C02 ANTENNA\n");break;
     case C03: printf("C03 ANTENNA\n");break;
     case C04:printf("C04 Antenna \n");break;
     default : break;
   }
}

void userdef(int k)
{
   //int k;
   switch(k)
   {
     case create:  printf("CREATE USER\n"); break;
     case add: printf(" ADD USER\n");break;
     case delete: printf("REMOVE USER\n");break;
     
     default : break;
   }
}

void dasdef(int r)
{
  // int r;
   switch(r)
   {
     case dasinit:printf("DAS INIT\n"); break;
     case addp: printf(" ADD Project\n");break;
     case delprj: printf("DElete Project\n");break;
     case startscan: printf("DAS START SCAN\n");break;
     case stopscan: printf("DAS STOP SCAN\n");break;
     default : break;
   }
}

void* highuser( void* parameters)
{
   while((name=readline("\n >> "))!=NULL)
    {
      if (strcmp(name,"stop")==0)
      continue;
      printf("\n");
      if(name)
      {ret=1;}
       else
        { ret=0; }
      usleep(10000);
       if (name[0]!=0)
            add_history(name);
     }
   free(name);
   return NULL;
}
void* lowuser( void* parameters)
{
  int i;

  for(;;)
  {
      if(ret){
      i = 0;
    //  fprintf(stderr,"HIGH USER INPUT ===>%s\n",name);
      token=strtok(name,del);
       while(token !=NULL)
        { 
          strcpy(cmd[i],token);
          fprintf(stderr," CMD[%d] => %s\n",i,cmd[i]);
          i++; 
          no_element = i;
          //fprintf(stderr," Number of Element is %d\n",no_element);
          token =  strtok(NULL," ");
        } 
        for (i = 0; i < END; i++) 
        {
           if (!strcasecmp(cmd[0], antn[i]))
            {
             //fprintf(stderr,"####### STRING is %s %d\n",cmd[0],i);
              antenna(i);
            }
         }
         for(i=0;i<UEND;i++)
         {
            if (!strcasecmp(cmd[0], user[i]))
            {
             //fprintf(stderr,"####### STRING is %s %d\n",cmd[0],i);
              userdef(i);
            }
          }
           for(i=0;i<DEND;i++)
         {
            if (!strcasecmp(cmd[0], das[i]))
            {
             //fprintf(stderr,"####### STRING is %s %d\n",cmd[0],i);
              dasdef(i);
            }
          } 
          fprintf(stderr," COMMAND NOT VALID\n"); 
       
      ret=0;
      usleep(500);
      }
      
   }
   return NULL;
}

int main()
{
  pthread_t high,low;
     
  pthread_create(&high ,NULL,&highuser,NULL);
  
  pthread_create(&low,NULL ,&lowuser,NULL);
   
  pthread_join(high,NULL);	
  pthread_join(low,NULL); 
 
  printf(" ALL THREAD CLOSED\n");
  return 0;
} 
